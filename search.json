[{"path":[]},{"path":"https://www.sciviews.org/mongoplyr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://www.sciviews.org/mongoplyr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://www.sciviews.org/mongoplyr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://www.sciviews.org/mongoplyr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://www.sciviews.org/mongoplyr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement phgrosjean@sciviews.org. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://www.sciviews.org/mongoplyr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://www.sciviews.org/mongoplyr/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://www.sciviews.org/mongoplyr/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://www.sciviews.org/mongoplyr/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://www.sciviews.org/mongoplyr/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://www.sciviews.org/mongoplyr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://www.sciviews.org/mongoplyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Philippe Grosjean Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://www.sciviews.org/mongoplyr/TODO.html","id":null,"dir":"","previous_headings":"","what":"mongoplyr To Do list","title":"mongoplyr To Do list","text":"Allow using different names fun_name summarise(). Style JSON query make readable.","code":""},{"path":"https://www.sciviews.org/mongoplyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philippe Grosjean. Author, maintainer.","code":""},{"path":"https://www.sciviews.org/mongoplyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Grosjean, Ph. (2023). SciViews::R. UMONS, Mons, Belgium. URL https://sciviews.r-universe.dev/.","code":"@Manual{,   title = {SciViews::R},   author = {Philippe Grosjean},   organization = {UMONS},   address = {MONS, Belgium},   year = {2023},   url = {https://sciviews.r-universe.dev/}, }"},{"path":[]},{"path":"https://www.sciviews.org/mongoplyr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Use {dplyr} and {dbplyr} with MongoDB","text":"Use {dplyr} verbs query MongoDB database. uses {dbplyr} create SQL queries, converts MongoDB JSON aggregating queries “mongotranslate” MongoDB BI Connector (installed). One can also recover JSON query use directly {mongolite}. way, {mongoplyr} serves translator {dplyr} code MongoDB JSON queries prototyping phase. Note: highly experimental. expect obtain running queries MongoDB JSON {dplyr} pipelines! However, code obtained base edited later . additional argument use {mongoplyr} prototyping MongoDB JSON queries.","code":""},{"path":"https://www.sciviews.org/mongoplyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Use {dplyr} and {dbplyr} with MongoDB","text":"can install development version {mongoplyr} GitHub : also need “mongotranslate” “mongodrdl” external binaries provided MongoDB BI Connector (note: “mongotranslate” provided Windows, see ). Linux MacOS, download MongoDB BI Connector follow instructions : https://www.mongodb.com/docs/bi-connector/current/installation/. Also note must register need premise MongoDB subscription allowed use binaries, … can use testing prototyping purpose (going ). R, can check accessibility programs using system(\"mongotranslate\"). Windows, install WSL2 (see https://learn.microsoft.com/en-us/windows/wsl/install) Linux distribution WSL (Ubuntu 22.04 instance). , install MongoDB BI Connector WSL Linux explained . , able access “mongotranslate”/“mongodrdl” command like wsl mongotranslate. Test R issuing system(\"wsl mongotranslate\"). made “mongotranslate” “mongodrdl” accessible path (, programs run terminal without specifying complete path), done. prefer isolate programs directory, say //directory//mongodb_bi, {mongoplyr} able access programs indicate path like :","code":"# install.packages(\"remotes\") remotes::install_github(\"SciViews/mongoplyr\") options(mongotranslate.path = \"/my/directory/to/mongodb_bi\") # Test it with: #system(file.path(getOption(\"mongotranslate.path\"), \"mongostranslate\"))"},{"path":"https://www.sciviews.org/mongoplyr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Use {dplyr} and {dbplyr} with MongoDB","text":"basic example using five main {dplyr} verbs select(), filter(), mutate(), group_by() summarise() (+ arrange()). set MongoDB server, just reuse example server provided Jeroen Ooms, author {mongolite} package {mongoplyr} uses connect MongoDB. Now, create tbl_mongo object lazily matches data.frame connection allows use {dplyr} verbs query . Use collect() get resulting data.frame: query just character string (obtained collapse()) can used directly $aggregate() method mongo object (string entered using raw character syntax embedding r\"{...}\"). Since pretty unreadable anyone used MongoDB aggregating language (even understand , probably!) copy paste also corresponding {dplyr} pipeline comments better document . case need refine query later , know can start {dplyr} pipeline comments. way, need {mongoplyr} , external programs “mongotranslate” “mongodrdl” run query database. , just used {mongoplyr} prototyping query. Compare direct manipulation mtcars data.frame using regular {dplyr} code: forget close connection server.","code":"library(mongoplyr) library(dplyr) #>  #> Attachement du package : 'dplyr' #> Les objets suivants sont masqués depuis 'package:stats': #>  #>     filter, lag #> Les objets suivants sont masqués depuis 'package:base': #>  #>     intersect, setdiff, setequal, union database <- \"test\" collection <- \"mtcars\" mongodb_url <- \"mongodb+srv://readwrite:test@cluster0-84vdt.mongodb.net\"  # Connect and make sure the collection contains the mtcars dataset mcon <- mongolite::mongo(collection, database, mongodb_url) mcon$drop() mcon$insert(mtcars) #> List of 5 #>  $ nInserted  : num 32 #>  $ nMatched   : num 0 #>  $ nRemoved   : num 0 #>  $ nUpserted  : num 0 #>  $ writeErrors: list() tbl <- tbl_mongo(mongo = mcon) query <- tbl |>   filter(mpg < 30 & wt >= 2) |>   select(cyl, wt, mpg, hp) |>   mutate(log_hp = log(hp), wt2 = wt^2) |>   group_by(cyl) |>   summarise(     max_mpg     = max(mpg, na.rm = TRUE),     min_wt2     = min(wt2, na.rm = TRUE),     mean_log_hp = mean(log_hp, na.rm = TRUE)) |>   arrange(cyl)    # Here is the equivalent MongoDB JSON query collapse(query) #> <mongo_query> #> [ #>   {\"$match\": {\"$and\": [{\"wt\": {\"$gte\": {\"$numberDecimal\": \"2\"}}},{\"mpg\": {\"$lt\": {\"$numberDecimal\": \"30\"}}}]}}, #>   {\"$project\": {\"test__mtcars__cyl\": \"$cyl\",\"test__mtcars__mpg\": \"$mpg\",\"ln(test__mtcars__hp)\": {\"$cond\": {\"if\": {\"$gt\": [\"$hp\",{\"$literal\": {\"$numberInt\": \"0\"}}]},\"then\": {\"$ln\": [\"$hp\"]},\"else\": {\"$literal\": null}}},\"power(test__mtcars__wt,2)\": {\"$pow\": [\"$wt\",{\"$literal\": {\"$numberDecimal\": \"2\"}}]}}}, #>   {\"$group\": {\"_id\": \"$test__mtcars__cyl\",\"max(test__q01__mpg)\": {\"$max\": \"$test__mtcars__mpg\"},\"min(test__q01__wt2)\": {\"$min\": \"$power(test__mtcars__wt,2)\"},\"avg(test__q01__log_hp)\": {\"$avg\": \"$ln(test__mtcars__hp)\"}}}, #>   {\"$addFields\": {\"_id\": {\"group_key_0\": \"$_id\"}}}, #>   {\"$sort\": {\"_id.group_key_0\": {\"$numberInt\": \"1\"}}}, #>   {\"$project\": {\"cyl\": \"$_id.group_key_0\",\"max_mpg\": \"$max(test__q01__mpg)\",\"min_wt2\": \"$min(test__q01__wt2)\",\"mean_log_hp\": \"$avg(test__q01__log_hp)\",\"_id\": {\"$numberInt\": \"0\"}}} #> ] collect(query) #>   cyl max_mpg min_wt2 mean_log_hp #> 1   4    26.0  4.5796    4.498422 #> 2   6    21.4  6.8644    4.792079 #> 3   8    19.2 10.0489    5.318145 # The next query is equivalent to (created with {mongoplyr}): #tbl |> #  filter(mpg < 30 & wt >= 2) |> #  select(cyl, wt, mpg, hp) |> #  mutate(log_hp = log(hp), wt2 = wt^2) |> #  group_by(cyl) |> #  summarise( #    max_mpg     = max(mpg, na.rm = TRUE), #    min_wt2     = min(wt2, na.rm = TRUE), #    mean_log_hp = mean(log_hp, na.rm = TRUE)) |> #  arrange(cyl) mcon$aggregate(r\"{[   {\"$match\": {\"$and\": [{\"wt\": {\"$gte\": {\"$numberDecimal\": \"2\"}}},{\"mpg\": {\"$lt\": {\"$numberDecimal\": \"30\"}}}]}},   {\"$project\": {\"test__mtcars__cyl\": \"$cyl\",\"test__mtcars__mpg\": \"$mpg\",\"ln(test__mtcars__hp)\": {\"$cond\": {\"if\": {\"$gt\": [\"$hp\",{\"$literal\": {\"$numberInt\": \"0\"}}]},\"then\": {\"$ln\": [\"$hp\"]},\"else\": {\"$literal\": null}}},\"power(test__mtcars__wt,2)\": {\"$pow\": [\"$wt\",{\"$literal\": {\"$numberDecimal\": \"2\"}}]}}},   {\"$group\": {\"_id\": \"$test__mtcars__cyl\",\"max(test__q01__mpg)\": {\"$max\": \"$test__mtcars__mpg\"},\"min(test__q01__wt2)\": {\"$min\": \"$power(test__mtcars__wt,2)\"},\"avg(test__q01__log_hp)\": {\"$avg\": \"$ln(test__mtcars__hp)\"}}},   {\"$addFields\": {\"_id\": {\"group_key_0\": \"$_id\"}}},   {\"$sort\": {\"_id.group_key_0\": {\"$numberInt\": \"1\"}}},   {\"$project\": {\"cyl\": \"$_id.group_key_0\",\"max_mpg\": \"$max(test__q01__mpg)\",\"min_wt2\": \"$min(test__q01__wt2)\",\"mean_log_hp\": \"$avg(test__q01__log_hp)\",\"_id\": {\"$numberInt\": \"0\"}}} ]}\") #>   cyl max_mpg min_wt2 mean_log_hp #> 1   4    26.0  4.5796    4.498422 #> 2   6    21.4  6.8644    4.792079 #> 3   8    19.2 10.0489    5.318145 mtcars |>   filter(mpg < 30 & wt >= 2) |>   select(cyl, wt, mpg, hp) |>   mutate(log_hp = log(hp), wt2 = wt^2) |>   group_by(cyl) |>   summarise(     max_mpg     = max(mpg, na.rm = TRUE),     min_wt2     = min(wt2, na.rm = TRUE),     mean_log_hp = mean(log_hp, na.rm = TRUE)) |>   arrange(cyl) #> # A tibble: 3 × 4 #>     cyl max_mpg min_wt2 mean_log_hp #>   <dbl>   <dbl>   <dbl>       <dbl> #> 1     4    26      4.58        4.50 #> 2     6    21.4    6.86        4.79 #> 3     8    19.2   10.0         5.32 mcon$disconnect()"},{"path":"https://www.sciviews.org/mongoplyr/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Use {dplyr} and {dbplyr} with MongoDB","text":"Help accessible usual one instructions: instructions, please, refer Web site https://www.sciviews.org/mongoplyr/. Please note {mongoplyr} package released Contributor Code Conduct. contributing project, agree abide terms.","code":"library(help = \"mongoplyr\") help(\"mongoplyr-package\") vignette(\"mongoplyr\") # Note: no vignette is installed with install_github()"},{"path":"https://www.sciviews.org/mongoplyr/reference/mongo_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a schema for a MongoDB collection — mongo_schema","title":"Compute a schema for a MongoDB collection — mongo_schema","text":"DRDL schema required match SQL queries MongoDB aggregation language MongoDB store structured data. However, data may intrinsic structure, computed. mtcars_schema() provides precomputed schema mtcars dataset, see also ?mtcars example testing purpose absence \"mongodrdl\" binaries (correct providing mtcars data inserted unmodified empty collection).","code":""},{"path":"https://www.sciviews.org/mongoplyr/reference/mongo_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a schema for a MongoDB collection — mongo_schema","text":"","code":"mongo_schema(   mongo,   max_scan = 100L,   recalc = FALSE,   path = getOption(\"mongotranslate.path\") )  # S3 method for mongo_schema print(x, ...)  mtcars_schema(db = \"test\", collection = \"mtcars\")"},{"path":"https://www.sciviews.org/mongoplyr/reference/mongo_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a schema for a MongoDB collection — mongo_schema","text":"mongo mongo object obtained mongo() attr(tbl_mongo(), \"mongo\"). max_scan maximum documents scan elaborate structure (100 default). recalc schema recalculated, case present mongo object (FALSE default)? path path \"mongodrdl\" binaries. accessible search path, indicated \"mongotranslate.path\" option, need specify . x mongo_schema object. ... arguments passed print() (used currently). db name database. collection name collection.","code":""},{"path":"https://www.sciviews.org/mongoplyr/reference/mongo_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a schema for a MongoDB collection — mongo_schema","text":"mongo_schema object schema character string sample attribute contains data.frame three first documents collection, example collection.","code":""},{"path":"https://www.sciviews.org/mongoplyr/reference/mongo_schema.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute a schema for a MongoDB collection — mongo_schema","text":"MongoDB BI Connector's \"mongodrdl\" external program used compute schema, unless \"schema\" attribute found mongo object recalc = FALSE.","code":""},{"path":"https://www.sciviews.org/mongoplyr/reference/mongo_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a schema for a MongoDB collection — mongo_schema","text":"","code":"if (FALSE) { # We use the same little MongoDB server with mtcars set up for {mongolite} library(mongoplyr) database <- \"test\" collection <- \"mtcars\" mongodb_url <- \"mongodb+srv://readwrite:test@cluster0-84vdt.mongodb.net\"  # Connect and make sure the collection contains the mtcars dataset mcon <- mongolite::mongo(collection, database, mongodb_url) mcon$drop() mcon$insert(mtcars)  # mtcars_schema() returns a precomputed schema for the mtcars dataset schema <- mtcars_schema(db = database, collection = collection) schema  # This schema can be added as an attribute to the connection to avoid # recalculating it every time attr(mcon, 'schema') <- schema  # Calling mongo_schema() on a mongo objet that already has a schema attached # just retrieves it (no recalculation) schema2 <- mongo_schema(mcon) identical(schema, schema2)  # ... unless there is nothing attached, or you use recalc = TRUE # In this case, \"mongodrdl\" must be installed and accessible # see vignette(\"mongoplyr\") schema3 <- mongo_schema(mcon, recalc = TRUE) schema3 # There is no particular order in the documents collection. So, do not expect # to get always the same three documents as example # However, the schema in itself should be fairly consistent (extracted with #`as.character()` here) identical(as.character(schema), as.character(schema3))  mcon$disconnect() }"},{"path":"https://www.sciviews.org/mongoplyr/reference/mongoplyr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mongoplyr: Use dplyr and dbplyr with MongoDB — mongoplyr-package","title":"mongoplyr: Use dplyr and dbplyr with MongoDB — mongoplyr-package","text":"Use dplyr verbs query MongoDB database. uses dbplyr create SQL queries, converts MongoDB JSON queries \"mongotranslate\" MongoDB BI connector (installed). One can also recover JSON query use directly mongolite. way, mongoplyr serves translator \"dplyr\" code MongoDB JSON queries.","code":""},{"path":"https://www.sciviews.org/mongoplyr/reference/mongoplyr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mongoplyr: Use dplyr and dbplyr with MongoDB — mongoplyr-package","text":"Use dplyr verbs query MongoDB database. uses dbplyr create SQL queries, converts MongoDB JSON queries \"mongotranslate\" MongoDB BI Connector (installed; Make sure adequate license use ). One can also recover JSON query use directly \"mongolite\". way, mongoplyr serves translator \"dplyr\" code MongoDB JSON queries. One JSON string constructed, use mongolite need mongoplyr run code. can use package, must install \"mongotranslate\" \"mongodrdl\" MongoDB make available PATH (specify directory options(mongotranslate.path = ....)). Follow instructions install BI Connector Premise system. Note \"mongotranslate\" apparently available Windows. Consequently, mongoplyr package useless OS. Use Linux MacOS (use WLS Windows, Docker container virtual machine instead).","code":""},{"path":"https://www.sciviews.org/mongoplyr/reference/mongoplyr-package.html","id":"important-functions","dir":"Reference","previous_headings":"","what":"Important functions","title":"mongoplyr: Use dplyr and dbplyr with MongoDB — mongoplyr-package","text":"tbl_mongo() creates object connects MongoDB database use dplyr verbs lazy way. mongo_schema() compute schema match collection MongoDB documents corresponding SQL table (required translate SQL query JSON MongoDB aggregation language).","code":""},{"path":[]},{"path":"https://www.sciviews.org/mongoplyr/reference/mongoplyr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mongoplyr: Use dplyr and dbplyr with MongoDB — mongoplyr-package","text":"Maintainer: Philippe Grosjean phgrosjean@sciviews.org (ORCID)","code":""},{"path":"https://www.sciviews.org/mongoplyr/reference/tbl_mongo.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tbl_mongo lazy connection to a MongoDB collection — tbl_mongo","title":"Create a tbl_mongo lazy connection to a MongoDB collection — tbl_mongo","text":"tbl_mongo object lazy connection MongoDB collection can use dbplyr dplyr verbs. query MongoDB JSON language computed collect()ing results, using collapse() retrieve JSON command character string.","code":""},{"path":"https://www.sciviews.org/mongoplyr/reference/tbl_mongo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tbl_mongo lazy connection to a MongoDB collection — tbl_mongo","text":"","code":"tbl_mongo(   collection = \"test\",   db = \"test\",   url = \"mongodb://localhost\",   mongo = NULL,   schema = attr(mongo, \"schema\"),   max_scan = 100L,   ...,   path = getOption(\"mongotranslate.path\") )  # S3 method for tbl_mongo print(x, ...)  # S3 method for tbl_mongo collapse(x, keep.names = FALSE, ...)  # S3 method for tbl_mongo collect(x, keep.names = FALSE, ...)  # S3 method for mongo_query print(x, sql = FALSE, ...)"},{"path":"https://www.sciviews.org/mongoplyr/reference/tbl_mongo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tbl_mongo lazy connection to a MongoDB collection — tbl_mongo","text":"collection collection use MongoDB database. db database use MongoDB server. url URL MongoDB server. uses mongo() mongolite internally, see documentation https://jeroen.github.io/mongolite/connecting--mongodb.html. mongo mongo connection MongoDB collection. provided, supersedes collection=, db= url= may provided (warning issued). schema schema collection calculated MongoDB BI app \"mongodrdl\", mongo_schema object mongo_schema(). max_scan maximum number documents scan collection order infer corresponding schema mongodrdl (100 default). ... parameters mongo() connect MongoDB server. path path mongotranslate mongodrdl software. Can set via options(mongotranslate.path = ....), left empty executables search path. x tbl_mongo mongo_query object obtained collapse(). keep.names Logical (FALSE default). (strange) names constructed dbplyr kept JSON MongoDB query ? sql corresponding SQL statement printed well JSON query (FALSE default?","code":""},{"path":"https://www.sciviews.org/mongoplyr/reference/tbl_mongo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tbl_mongo lazy connection to a MongoDB collection — tbl_mongo","text":"tbl_mongo object contains logic process queries MongoDB collection dplyr verbs. collect() returns data.frame result querying MongoDB collection. collapse() returns MongoDB JSON query corresponding process mongo_query object.","code":""},{"path":"https://www.sciviews.org/mongoplyr/reference/tbl_mongo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tbl_mongo lazy connection to a MongoDB collection — tbl_mongo","text":"","code":"if (FALSE) { # We use the same little MongoDB server with mtcars set up for {mongolite} # Note that mongotranslate and mongodrdl must be installed and accessible # see vignette(\"mongoplyr\"). library(mongoplyr) library(dplyr) database <- \"test\" collection <- \"mtcars\" mongodb_url <- \"mongodb+srv://readwrite:test@cluster0-84vdt.mongodb.net\"  # Connect and make sure the collection contains the mtcars dataset mcon <- mongolite::mongo(collection, database, mongodb_url) mcon$drop() mcon$insert(mtcars)  # Create a lazy mongo object with this connection tbl <- tbl_mongo(mongo = mcon)  # Create a mongodb query tbl2 <- tbl |>   filter(mpg < 20) |>   select(mpg, cyl, hp) tbl2 # Use collect() to get the result collect(tbl2) # Use collapse() to get the JSON query (query <- collapse(tbl2)) # Use this JSON query directly in mongolite # Note, the connection is available as tbl2$mongo here but you do not # need {mongoplyr} any more and can use mongolite::mongo()$find() instead mcon$aggregate(query)  # or attr(tbl2, 'mongo')$aggregate(query)  # A more complex exemple with summarise by group # Note: currently, names must be fun_var in summarise() query2 <- tbl |>   select(mpg, cyl, hp) |>   group_by(cyl) |>   summarise(     mean_mpg = mean(mpg, na.rm = TRUE), sd_mpg = sd(mpg, na.rm = TRUE),     mean_hp  = mean(hp, na.rm = TRUE),  sd_hp  = sd(hp, na.rm = TRUE)) |>     collapse() query2 mcon$aggregate(query2) mcon$disconnect() }"},{"path":"https://www.sciviews.org/mongoplyr/news/index.html","id":"mongoplyr-0009000","dir":"Changelog","previous_headings":"","what":"mongoplyr 0.0.0.9000","title":"mongoplyr 0.0.0.9000","text":"Initial development version package.","code":""}]
