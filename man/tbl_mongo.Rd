% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tbl_mongo.R
\name{tbl_mongo}
\alias{tbl_mongo}
\alias{print.tbl_mongo}
\alias{collapse.tbl_mongo}
\alias{collect.tbl_mongo}
\alias{print.mongo_query}
\title{Create a tbl_mongo lazy connection to a MongoDB collection}
\usage{
tbl_mongo(
  collection = "test",
  db = "test",
  url = "mongodb://localhost",
  max_scan = 1000L,
  ...,
  mongotranslate.path = getOption("mongotranslate.path")
)

\method{print}{tbl_mongo}(x, ...)

\method{collapse}{tbl_mongo}(x, keep.names = FALSE, ...)

\method{collect}{tbl_mongo}(x, keep.names = FALSE, ...)

\method{print}{mongo_query}(x, sql = FALSE, ...)
}
\arguments{
\item{collection}{The collection to use in the MongoDB database.}

\item{db}{The database to use from the MongoDB server.}

\item{url}{The URL to the MongoDB server. This uses \code{\link[=mongo]{mongo()}} from
{mongolite} internally, see the documentation at
https://jeroen.github.io/mongolite/connecting-to-mongodb.html.}

\item{max_scan}{The maximum number of documents to scan in the collection in
order to infer the corresponding schema with mongodrdl (1000 by default).}

\item{...}{More parameters to \code{\link[=mongo]{mongo()}} to connect to the MongoDB server.}

\item{mongotranslate.path}{The path to the mongotranslate and mongodrdl
software. Can be set via \code{options(mongotranslate.path = ....)}, or left empty
if these executables are on the search path.}

\item{x}{A \strong{tbl_mongo} or a \strong{mongo_query} object as obtained with \code{\link[=collapse]{collapse()}}.}

\item{keep.names}{Logical (\code{FALSE} by default). Should the (strange) names
constructed by {dbplyr} be kept in the JSON MongoDB query or not?}

\item{sql}{Should the corresponding SQL statement be printed as well as the
JSON query (\code{FALSE} by default?}
}
\value{
A \strong{tbl_mongo} object that contains the logic to process queries on
a MongoDB collection through {dplyr} verbs. \code{\link[=collect]{collect()}} returns a data.frame
with the result from querying the MongoDB collection. \code{\link[=collapse]{collapse()}} returns
the MongoDB JSON query corresponding to the process in a \strong{mongo_query}
object.
}
\description{
The \strong{tbl_mongo} object is a lazy connection to a MongoDB
collection that you can use with {dbplyr} and {dplyr} verbs. The query
in MongoDB JSON language is computed on \code{\link[=collect]{collect()}}ing the results, or
by using \code{\link[=collapse]{collapse()}} to retrieve the JSON command in a character string.
}
\examples{
\dontrun{
# We use the same little MongoDB server with mtcars set up for {mongolite}
# Note that mongotranslate and mongodrdl must be installed and accessible
# see vignette("mongoplyr").
library(mongoplyr)
library(dplyr)
database <- "test"
collection <- "mtcars"
mongodb_url <- "mongodb+srv://readwrite:test@cluster0-84vdt.mongodb.net"
tbl <- tbl_mongo(collection, database, url = mongodb_url)

# Create a simple mongodb query
tbl2 <- tbl |>
  filter(mpg < 20) |>
  select(mpg, cyl, hp)
tbl2
# Use collect() to get the result
collect(tbl2)
# Use collapse() to get the JSON query
(query <- collapse(tbl2))
# Use this JSON query directly in mongolite
# Note, the connection is available as tbl2$mongo here but you do not
# need {mongoplyr} any more and can use mongolite::mongo()$find() instead
tbl2$mongo$aggregate(query)

# A more complex exemple with summarise by group
# Note: currently, names must be fun_var in summarise()
query2 <- tbl |>
  select(mpg, cyl, hp) |>
  group_by(cyl) |>
  summarise(
    mean_mpg = mean(mpg, na.rm = TRUE), sd_mpg = sd(mpg, na.rm = TRUE),
    mean_hp  = mean(hp, na.rm = TRUE),  sd_hp  = sd(hp, na.rm = TRUE)) |>
    collapse()
query2
tbl$mongo$aggregate(query2)
}
}
